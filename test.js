// @ts-check
const pkijs = require(".");
const asn1js = require("asn1js");
const nodeCrypto = require("crypto");
const { Convert } = require("pvtsutils");

async function main() {

  pkijs.setEngine("nodejs", nodeCrypto.webcrypto, new pkijs.CryptoEngine({ name: "nodejs", crypto: nodeCrypto.webcrypto, subtle: nodeCrypto.webcrypto.subtle }));
  const crypto = pkijs.getCrypto(true);

  //#region Create certificate
  const cert = new pkijs.Certificate();
  cert.version = 2;
  cert.serialNumber = new asn1js.Integer({ value: 1 });
  cert.issuer.typesAndValues.push(new pkijs.AttributeTypeAndValue({
    type: "2.5.4.3", // Common name
    value: new asn1js.BmpString({ value: "Test" })
  }));
  cert.subject.typesAndValues.push(new pkijs.AttributeTypeAndValue({
    type: "2.5.4.3", // Common name
    value: new asn1js.BmpString({ value: "Test" })
  }));

  cert.notBefore.value = new Date();
  const notAfter = new Date();
  notAfter.setUTCFullYear(notAfter.getUTCFullYear() + 1);
  cert.notAfter.value = notAfter;

  cert.extensions = []; // Extensions are not a part of certificate by default, it's an optional array

  // "BasicConstraints" extension
  const basicConstr = new pkijs.BasicConstraints({
    cA: true,
    pathLenConstraint: 3
  });
  cert.extensions.push(new pkijs.Extension({
    extnID: "2.5.29.19",
    critical: false,
    extnValue: basicConstr.toSchema().toBER(false),
    parsedValue: basicConstr // Parsed value for well-known extensions
  }));

  // "KeyUsage" extension
  const bitArray = new ArrayBuffer(1);
  const bitView = new Uint8Array(bitArray);
  bitView[0] |= 0x02; // Key usage "cRLSign" flag
  bitView[0] |= 0x04; // Key usage "keyCertSign" flag
  const keyUsage = new asn1js.BitString({ valueHex: bitArray });
  cert.extensions.push(new pkijs.Extension({
    extnID: "2.5.29.15",
    critical: false,
    extnValue: keyUsage.toBER(false),
    parsedValue: keyUsage // Parsed value for well-known extensions
  }));

  const algorithm = pkijs.getAlgorithmParameters("RSASSA-PKCS1-v1_5", "generateKey");
  if ("hash" in algorithm.algorithm) {
    algorithm.algorithm.hash.name = "SHA-256";
  }

  const keys = await crypto.generateKey(algorithm.algorithm, true, algorithm.usages);

  // Exporting public key into "subjectPublicKeyInfo" value of certificate
  await cert.subjectPublicKeyInfo.importKey(keys.publicKey);

  // Signing final certificate
  await cert.sign(keys.privateKey, "SHA-256");
  const issuerCert = cert;
  //#endregion

  // await csrCreate(keys);
  // await csrParse();
  // await cmsSignedDataCreate(cert, keys);
  // await cmsSignedDataVerify();

  const cmsEnveloped = await cmsEnvelopedDataEncrypt(cert, keys);
  // await cmsEnvelopedDataDecrypt(cert, keys, cmsEnveloped);

  // const cmsEncrypted = await cmsEncryptedDataEncrypt();
  // await cmsEncryptedDataDecrypt(cmsEncrypted);

  // await chainValidate();
}

async function ocspRespVerify(ocspRespRaw, cert) {
  const asnOcspResp = asn1js.fromBER(ocspRespRaw);
  const ocspResp = new pkijs.OCSPResponse({ schema: asnOcspResp.result });

  if (!ocspResp.responseBytes) {
    throw new Error("No \"ResponseBytes\" in the OCSP Response - nothing to verify");
  }

  const asnOcspRespBasic = asn1js.fromBER(ocspResp.responseBytes.response.valueBlock.valueHex);
  const ocspBasicResp = new pkijs.BasicOCSPResponse({ schema: asnOcspRespBasic.result });
  const ok = await ocspBasicResp.verify({ trustedCerts: [cert] });
  console.log(ok);
}

async function csrCreate(keys) {
  // Get a "crypto" extension
  const crypto = pkijs.getCrypto(true);

  const pkcs10 = new pkijs.CertificationRequest();

  pkcs10.subject.typesAndValues.push(new pkijs.AttributeTypeAndValue({
    type: "2.5.4.3",
    value: new asn1js.Utf8String({ value: "Test" })
  }));


  await pkcs10.subjectPublicKeyInfo.importKey(keys.publicKey);

  pkcs10.attributes = [];

  // Subject Alternative Name
  const altNames = new pkijs.GeneralNames({
    names: [
      new pkijs.GeneralName({ // email
        type: 1,
        value: "email@address.com"
      }),
      new pkijs.GeneralName({ // domain
        type: 2,
        value: "www.domain.com"
      }),
    ]
  });

  // SubjectKeyIdentifier
  const subjectKeyIdentifier = await crypto.digest({ name: "SHA-1" }, pkcs10.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex);

  pkcs10.attributes.push(new pkijs.Attribute({
    type: "1.2.840.113549.1.9.14", // pkcs-9-at-extensionRequest
    values: [(new pkijs.Extensions({
      extensions: [
        new pkijs.Extension({
          extnID: "2.5.29.14", // id-ce-subjectKeyIdentifier
          critical: false,
          extnValue: (new asn1js.OctetString({ valueHex: subjectKeyIdentifier })).toBER(false)
        }),
        new pkijs.Extension({
          extnID: "2.5.29.17", // id-ce-subjectAltName
          critical: false,
          extnValue: altNames.toSchema().toBER(false)
        }),
        new pkijs.Extension({
          extnID: "1.2.840.113549.1.9.7", // pkcs-9-at-challengePassword
          critical: false,
          extnValue: (new asn1js.PrintableString({ value: "passwordChallenge" })).toBER(false)
        })
      ]
    })).toSchema()]
  }));

  // Signing final PKCS#10 request
  await pkcs10.sign(keys.privateKey, "SHA-256");

  const pkcs10Raw = pkcs10.toSchema(true).toBER();

  console.log(pkcs10.toString());
  console.log(pkcs10.toSchema(true).toString());
}

async function csrParse() {
  const hex = "308202d3308201bd020100300f310d300b06035504030c045465737430820122300d06092a864886f70d01010105000382010f003082010a0282010100be28245bd93fc89030bdca154677e2bcfe8d72ccdd4466e8342821d99d7420e3a86e9c12063f0d268f84dda769cc54dc983675d265d42952b630aec9efd0e059ff48526017dfff81699f4e755d0bfc81b9c9bb8f211c992f9ce9419195d04820c57d015e7fe957aabf260d3744fd562ca7849569ad2804bfa535989287241afd3bb672adb5f31124452213f6eefcc33906c26d25ed2cf7e55c7be2ff918d131b16cb0414be564b9f6b17fa75612ce2a34553566a5b4a56c9c351dcfb323b3075658007d6d596cd095e4952962a9bfa4b9a193dffe3da8c1ce8dd8225211d044a4837b387edbf8569ed347f4e468d35cd402c1f41e9168afb27ec29f6a35e857b0203010001a08180307e06092a864886f70d01090e3171306f301d0603551d0e041604140522b0cb2d78534ad0a92efa84983e43bd7a533c302c0603551d11042530238111656d61696c40616464726573732e636f6d820e7777772e646f6d61696e2e636f6d302006092a864886f70d0109070413131170617373776f72644368616c6c656e6765300b06092a864886f70d01010b038201010043038a809983a194f5f438912a45f3931953cded93c53104c475aaf19f6f870e9dbae5129f78828a310ee60cbf33d83bfe7cc0b43b401c0b0a8713faebccbe6abe5d4214bdf5c444c79d1d75a66f7f4b9541845bf3585a78327607856fadb3613ac7ab21c78d280b2ac5cef9baa67070c54c61837a625fe09f8cdca9f8a1a9db5ed00dbae5cc06078e708f1c2c2d345c526a0b8e8cac61e7b783d8962aba3e772a89592d49621eec083cf4ec984a129ccc834e896973965776b27a37f8ed05ed62ae2fbc54a149a030358ebd029e67161454ff3a947fbca1a5047ad164a58550f2318c646d676c517db16a5fde40d16335d0d7a8d670ab07e5da7f2b698d34bf";
  const pkcs10Raw = Convert.FromHex(hex);

  const pkcs10 = pkijs.CertificationRequest.fromBER(pkcs10Raw);

  if (pkcs10.attributes) {
    const attrExtensions = pkcs10.attributes.find(o => o.type === "1.2.840.113549.1.9.14"); // pkcs-9-at-extensionRequest
    if (attrExtensions) {
      const extensions = new pkijs.Extensions({ schema: attrExtensions.values[0] });
      for (const extension of extensions.extensions) {
        if (extension.extnID === "1.2.840.113549.1.9.7") { // pkcs-9-at-challengePassword
          const asn = asn1js.fromBER(extension.extnValue.valueBlock.valueHex);
          if (asn.result.valueBlock.value !== "passwordChallenge") {
            throw new Error("PKCS#11 certification request is invalid. Challenge password is incorrect");
          }
        }
      }
    }
  }

  const ok = await pkcs10.verify();
  if (!ok) {
    throw Error("PKCS#11 certification request is invalid. Signature is wrong")
  }

  console.log(ok)
}

async function cmsSignedDataCreate(cert, keys) {
  const buffer = new Uint8Array(10).buffer;

  // Create a new CMS Signed Data
  const cmsSigned = new pkijs.SignedData({
    encapContentInfo: new pkijs.EncapsulatedContentInfo({
      eContentType: "1.2.840.113549.1.7.1", // "data" content type
      eContent: new asn1js.OctetString({ valueHex: buffer })
    }),
    signerInfos: [
      new pkijs.SignerInfo({
        sid: new pkijs.IssuerAndSerialNumber({
          issuer: cert.issuer,
          serialNumber: cert.serialNumber
        })
      })
    ],
    // Signer certificate for chain validation
    certificates: [cert]
  });

  await cmsSigned.sign(keys.privateKey, 0, "SHA-256");

  // Add Signed Data to Content Info
  const cms = new pkijs.ContentInfo({
    contentType: pkijs.ContentInfo.SIGNED_DATA,
    content: cmsSigned.toSchema(true),
  });

  // Encode CMS to ASN.1
  const cmsRaw = cms.toSchema().toBER();

  console.log(cms.toString("hex"));
}

async function cmsSignedDataVerify() {
  const hex = "3082044e06092a864886f70d010702a082043f3082043b020101310f300d06096086480165030402010500301b06092a864886f70d010701a00e240c040a00000000000000000000a08202c1308202bd308201a7a003020102020101300b06092a864886f70d01010b30133111300f06035504031e080054006500730074301e170d3232303432303230323531365a170d3233303432303230323531365a30133111300f06035504031e08005400650073007430820122300d06092a864886f70d01010105000382010f003082010a0282010100f2efefb3f53e021cec091f3d5680021e998407dcf062cc402a3dd8a729b2d010cfde4e323a1b659285382807cb599a3f11bb582c05d8a030c8ddac1bd87e0e85542541a0b4f7d4cf8ffa366e062b69a3f91979276c1d7ff0a9b0b4777ffa429db657525334c496ddfc985df8a8ce2eba5fa5b9c88286cd5607ce4da05c5d686ac0055c166f44c6c21ad826e310a6d000dc6a6e18c1320bc90d7d88b56ac7a950ff1c34b4f58073aa07e54d57d097aaad6da43211b3a21ab3e5ca2a4e4d19f3c1de58395c87a79e2f11d8a7c7c7a7d35b0d7ecdd7d10848a39f09a66cca299cc8d71b72b042e6f138c8b39b81a276a91f29bb654d6823b6d9fcaf0d18be17f7470203010001a320301e300f0603551d13040830060101ff020103300b0603551d0f040403020006300b06092a864886f70d01010b03820101007b7a66186e4eb8eb3eb6fabe17f79a238c722a520c613e3e3525512d29330d984a74457ddafd5a3141422e63d914d104e12599d0ae2145ffb60e2519017a2c10d28a1bcdcdc8065e1fd739541e9609dfa40f0b0990873b4916a1ac7ba6429ae1a75d273c6a76d550a8f1f1e26ad98e94066cc8de7e35722adfdbfea6a5024f94e6ca0dd88a950964098886c7ac1c065206a5e48d1779609f7f7dcbcba26364cf3e5abec78ee320959e37adc9ca5e42b51fffcaabbc8cc3f6c7bd1e92f63c16bc65a5e872c7b95ccde9c3575f224860494be0f143cd9d8e1c7ce0f33a46a9c8b3eb1f8f64b8bf48a0ddbb014eb3d6dae18ef5d6d3ca2e9b172cd1201629688363318201413082013d020100301830133111300f06035504031e080054006500730074020101300d06096086480165030402010500300b06092a864886f70d01010b04820100e307b7be9aca9ca1492a295c542d49b73603def2a6904837692434289939d89a74eaee05341179751a7313f5178ffc569de6f7a7693d959f88d399c0abcf444a011b80ed8fb2968fe6b233ed300da183e422de6e50a268df6cf5ae126036ccf4c4fb77260848d626d0cb839956bbf1b7af04393f99e4248a28776d3bf768f1d89057ada226f40129baee1d001798cc3e60a5e38c1dc73609c50940155586fa318a604244f1793d60db317643ee9cbe4dfeb2f20f1defd6c4320396005fd0a37d15c24c8c611878d2ea097439345628f0a77a0cdfad1435d42de1ba83c5306c4c421ab31eed2d41dd68f23878de41e6e8bbef2ae362878c9587b112723cbde817";
  const cmsRaw = Convert.FromHex(hex);

  const cms = pkijs.ContentInfo.fromBER(cmsRaw);
  if (cms.contentType !== pkijs.ContentInfo.SIGNED_DATA) {
    throw new Error("CMS is not Signed Data");
  }
  const signedData = new pkijs.SignedData({ schema: cms.content });

  const trustedCert = signedData.certificates[0];

  const ok = await signedData.verify({
    signer: 0,
    checkChain: true,
    trustedCerts: [trustedCert]
  });
  if (!ok) {
    throw new Error("CMS signature is invalid")
  }

  console.log(ok);
}

async function cmsEnvelopedDataEncrypt(cert, keys) {
  const dataToEncrypt = new Uint8Array(10 * 1024 * 1024).buffer;

  const cmsEnveloped = new pkijs.EnvelopedData();

  // Add recipient
  cmsEnveloped.addRecipientByCertificate(cert, { oaepHashAlgorithm: "SHA-256" });

  // Secret key algorithm
  const alg = {
    name: "AES-GCM",
    length: 256,
  }
  console.time("cmsEnveloped.encrypt");
  await cmsEnveloped.encrypt(alg, dataToEncrypt);
  console.timeEnd("cmsEnveloped.encrypt");

  // Add Enveloped Data into CMS Content Info
  console.time("cmsEnveloped.toSchema()");
  const cmsContent = new pkijs.ContentInfo();
  cmsContent.contentType = pkijs.ContentInfo.ENVELOPED_DATA;
  cmsContent.content = cmsEnveloped.toSchema();
  console.timeEnd("cmsEnveloped.toSchema()");

  console.time("cmsContent.toSchema().toBER()");
  const cmsContentRaw = cmsContent.toSchema().toBER();
  console.timeEnd("cmsContent.toSchema().toBER()");

  // console.log(cmsContent.toString("hex"));

  // return cmsContent.toString("hex");
}

async function cmsEnvelopedDataDecrypt(cert, keys, hex) {
  const cmsContentRaw = Convert.FromHex(hex);

  // Get a "crypto" extension
  const crypto = pkijs.getCrypto();

  // Parse CMS Content Info
  const cmsContent = pkijs.ContentInfo.fromBER(cmsContentRaw);
  if (cmsContent.contentType !== pkijs.ContentInfo.ENVELOPED_DATA) {
    throw new Error("CMS is not Enveloped Data");
  }
  // Parse CMS Enveloped Data
  const cmsEnveloped = new pkijs.EnvelopedData({ schema: cmsContent.content });

  // Export private key to PKCS#8
  const pkcs8 = await crypto.exportKey("pkcs8", keys.privateKey);

  // Decrypt data
  const decryptedData = await cmsEnveloped.decrypt(0, {
    recipientCertificate: cert,
    recipientPrivateKey: pkcs8,
  });

  console.log(decryptedData);
}

async function cmsEncryptedDataEncrypt() {
  const dataToEncrypt = new Uint8Array(20).buffer;
  const password = new Uint8Array(20).buffer;

  const cmsEncrypted = new pkijs.EncryptedData();

  await cmsEncrypted.encrypt({
    contentEncryptionAlgorithm: {
      name: "AES-GCM",
      length: 256,
    },
    hmacHashAlgorithm: "SHA-256",
    iterationCount: 1000,
    password: password,
    contentToEncrypt: dataToEncrypt,
  });

  // Add Encrypted Data into CMS Content Info
  const cmsContent = new pkijs.ContentInfo();
  cmsContent.contentType = pkijs.ContentInfo.ENCRYPTED_DATA;
  cmsContent.content = cmsEncrypted.toSchema();

  const cmsContentRaw = cmsContent.toSchema().toBER();

  console.log(cmsContent.toString("hex"));

  return cmsContent.toString("hex");
}

async function cmsEncryptedDataDecrypt(hex) {
  const cmsContentRaw = Convert.FromHex(hex);
  const password = new Uint8Array(20).buffer;

  // Parse CMS Content Info
  const cmsContent = pkijs.ContentInfo.fromBER(cmsContentRaw);
  if (cmsContent.contentType !== pkijs.ContentInfo.ENCRYPTED_DATA) {
    throw new Error("CMS is not Encrypted Data");
  }
  // Parse CMS Encrypted Data
  const cmsEncrypted = new pkijs.EncryptedData({ schema: cmsContent.content });

  // Decrypt data
  const decryptedData = await cmsEncrypted.decrypt({
    password: password,
  });

  console.log(decryptedData);
}

async function chainValidate() {
  const certHex1 = "308205d0308204b8a00302010202043ab6508b300d06092a864886f70d0101050500307f310b300906035504061302424d31193017060355040a131051756f5661646973204c696d6974656431253023060355040b131c526f6f742043657274696669636174696f6e20417574686f72697479312e302c0603550403132551756f566164697320526f6f742043657274696669636174696f6e20417574686f72697479301e170d3031303331393138333333335a170d3231303331373138333333335a307f310b300906035504061302424d31193017060355040a131051756f5661646973204c696d6974656431253023060355040b131c526f6f742043657274696669636174696f6e20417574686f72697479312e302c0603550403132551756f566164697320526f6f742043657274696669636174696f6e20417574686f7269747930820122300d06092a864886f70d01010105000382010f003082010a0282010100bf61b59553ba57fcfaf2670b3a1adf11806495b4d1bccd7acff629962e2454402438f71a85dc584ccba4274297d09f838ac3e406035b00a5511e700474e2c1d43aabd7ad3b0718058efd83acea66d9181b688af5571a98baf5ed763d7cd9de946a3b4b17c1d58fbd65383a95d03d55364edf7957312a1ed85965495820987eab5f7e9fe9d64dec8374a9c76cd8ee294a852a0614f954e6d3da65078b633712d7d0ecc37b204144a3edcba017e17165ce1d6631f7760119c87d0358b695491da61226e8c60c76e0e366cbea5da626eee5cc5fbd67a701270ea2ca54c5b17a951d711e4a298a03dc6a45c1a4195e6f36cdc3a2b0b7fe5c38e252bcf84443e690bb0203010001a38202523082024e303d06082b060105050701010431302f302d06082b06010505073001862168747470733a2f2f6f6373702e71756f76616469736f666673686f72652e636f6d300f0603551d130101ff040530030101ff3082011a0603551d20048201113082010d3082010906092b06010401be5800013081fb3081d406082b060105050702023081c71a81c452656c69616e6365206f6e207468652051756f566164697320526f6f7420436572746966696361746520627920616e7920706172747920617373756d657320616363657074616e6365206f6620746865207468656e206170706c696361626c65207374616e64617264207465726d7320616e6420636f6e646974696f6e73206f66207573652c2063657274696669636174696f6e207072616374696365732c20616e64207468652051756f566164697320436572746966696361746520506f6c6963792e302206082b060105050702011616687474703a2f2f7777772e71756f76616469732e626d301d0603551d0e041604148b4b6dedd329b90619ec3939a9f097846acbefdf3081ae0603551d230481a63081a380148b4b6dedd329b90619ec3939a9f097846acbefdfa18184a48181307f310b300906035504061302424d31193017060355040a131051756f5661646973204c696d6974656431253023060355040b131c526f6f742043657274696669636174696f6e20417574686f72697479312e302c0603550403132551756f566164697320526f6f742043657274696669636174696f6e20417574686f7269747982043ab6508b300e0603551d0f0101ff040403020106300d06092a864886f70d010105050003820101008ad414b5fef49a92a719d4a47e72188fd9687c5224dd676f397ac4aa5e3de258b04d70988461e81be369180ecefb4750a04efff0241fbdb2cef527fcec2f53aa737b033d746ee6169eeba52ec4bf5627502b62babe4b1c3c555c411d24be8220475dd5447e7a1668df7d4d517078571d331efd02999c0ccd0a054fc7bb8ea475fa4a6db1808e0956b99c1a60fe5dc1d77adc1178d0d65dc1b7d5ad3299033a8acc54253931817b132251ba466ca1bb9efa046c4926748fd273ebcc30a2e6ea592287f897f50efdeacc92a416c45218ea21ceb1f1e68481e5baa98628f2435a5d129dac1ed9a8e50a6aa77fa08729cff2894dd4ecc5e2e67ad036238a4a7436f9";
  const certHex2 = "3082058030820468a003020102021469b2d1ccf02e20dcc95c62894f7f9e5f5fc057bf300d06092a864886f70d01010b0500307f310b300906035504061302424d31193017060355040a131051756f5661646973204c696d6974656431253023060355040b131c526f6f742043657274696669636174696f6e20417574686f72697479312e302c0603550403132551756f566164697320526f6f742043657274696669636174696f6e20417574686f72697479301e170d3134303533303136333535355a170d3231303331373138333333335a3049310b300906035504061302424d31193017060355040a131051756f5661646973204c696d69746564311f301d0603550403131651756f56616469732049737375696e6720434120473430820222300d06092a864886f70d01010105000382020f003082020a0282020100c451a8fd2ff8195ce8997a319a4693624ce7625b25a497cb400310f7993cd9d671ccf38126dcd53f5968a69e6479a527c041cc98f6c8244089c4a12a5b47200912f0ffcc8e64beeed1015fc7a0fcfc9c5619ba515dbc3ac5cf0faaeae0edea1e64ddf31993a14be751905b3202b405bb595cf0c217a4c88992b55744dabc083c4a133372cf04da276fed76c92852493861cbaeb7708a2d8858a8116303818c32a2d320c22abb602872011bc2d3f8cbfa1e3c3b75663b888f4f623e6d3aa970b78b66924d8dea9ce1e4fc845c11b18531a7746da49774b68f3d8b7ceffcc198cfbcd8aa214c9249c7e2c7a3f73494b7142f1c09e4baded4d367382d023fb238e6e0f43884190f95a0ef0c70ee38cc836567791b409cbbc4c94a90b9c6040a12d1c591381c4701550c4a55ae344a88a848401059c809cc9e67800b20ba5369a15f008a9d856cc9b672a2c31553fbd38cac6e4c3d015a12751a35eeb1fb440e4338cf21549ff54a031fe1c66bd78c6b9b3d2bc76ff0158af1c0a4f625ea5b332dd3268c457a16126ce5941729b8416033da4960358f97fe8231b28bb423648434f664561ba2578962ac4239ac07a9fc68e1fc3e165df1c46f082952d3af4a8bf37c80d3bb568969f65a2ac3b32c48cbb7df8baf041d2d41b639d77941d3c6761a50398e87849d4e7cd33570e562afeaaac75350713b3d455261ffb9c1d73a19bb4d0203010001a38201283082012430120603551d130101ff040830060101ff02010030110603551d20040a300830060604551d2000307106082b0601050507010104653063302a06082b06010505073001861e687474703a2f2f6f6373702e71756f7661646973676c6f62616c2e636f6d303506082b060105050730028629687474703a2f2f74727573742e71756f7661646973676c6f62616c2e636f6d2f71767263612e637274300e0603551d0f0101ff040403020106301f0603551d230418301680148b4b6dedd329b90619ec3939a9f097846acbefdf30380603551d1f0431302f302da02ba0298627687474703a2f2f63726c2e71756f7661646973676c6f62616c2e636f6d2f71767263612e63726c301d0603551d0e04160414f3341211f18cc6f6b2a7b4994b708aca60a1cb45300d06092a864886f70d01010b05000382010100b9f61352b517a72a4d84774309a4dba067b4600e42f403bdc4ff2c5a0f902e78c563c84aec27f67ce429d0cf6018fa6822da0252760df21754c6f6081ea1cc82e4c33a6d99227cc4c077b4e6052047934039cfdc55adc346af294d799c644c205f8a1c56fc46a05fcb98dd917a39b4afc477996b9eacde6f2d79ea7fd7132498521cfd693eed72ac3fd0b4011914edb0f0cbf39c5114238cc7dc697d328196e41d478f017694833e888d925b1858986903c7f5d3f2615250eb34a0fd2630300fb5fd70e7272c370b1cf3e71ea62c0743b64b885e971fc1307d60642af30c7068445163599fdb57c21fff80e5c21192d82fefd51743ff642d64845c521a63c267";
  const certHex3 = "308206673082044fa00302010202147b98ebb868efe4eefc130a509f9882579bd78115300d06092a864886f70d01010b05003049310b300906035504061302424d31193017060355040a131051756f5661646973204c696d69746564311f301d0603550403131651756f56616469732049737375696e67204341204734301e170d3134303630363133323235305a170d3137303630363133323234345a308187310b300906035504061302424d3111300f0603550407130848616d696c746f6e31193017060355040a131051756f5661646973204c696d69746564311c301a060355040313135374657068656e20522e204461766964736f6e312c302a06092a864886f70d010901161d732e6461766964736f6e4071756f7661646973676c6f62616c2e636f6d30820122300d06092a864886f70d01010105000382010f003082010a0282010100c1deede17f0700631d74ae5b281d161ec3747b2fa7349d8a9d329efd9e2b11efb5f03c6a0932772552c3c830e24d13f3940cfd028936e27b4f6cb363725b5baf257b3d7cd4630a5cb4e0871aa5dca07013f01ca28dff76e8b16bf19884dacf06668757196b31cd8f290f79912b5d317ca2c864bf9bef8b998ee3d4451aa1ebd717c2917751ff64cbaa1c9a4ef2b69a666cc26156b4b6f5abd031a1f270314380c2a4712703624a20a8c38cb1c44c85eb87dbac0efd8779c17702353bcb243771d267d2f8884f2ecbbb0ad75e0db0b39c93b76d12d7e8c04d2fddef3c3f6d63890f6480ddd8664f88fd80e8cf4f7297829c1551ea5b9f60298d42faa34450a5bf0203010001a38202063082020230280603551d110421301f811d732e6461766964736f6e4071756f7661646973676c6f62616c2e636f6d307306082b0601050507010104673065302a06082b06010505073001861e687474703a2f2f6f6373702e71756f7661646973676c6f62616c2e636f6d303706082b06010505073002862b687474703a2f2f74727573742e71756f7661646973676c6f62616c2e636f6d2f717669636167342e637274304f0603551d20044830463044060a2b06010401be5801822c3036303406082b060105050702011628687474703a2f2f7777772e71756f7661646973676c6f62616c2e636f6d2f7265706f7369746f72793044060a2a864886f72f0101090104363034020101862f687474703a2f2f7473612e71756f7661646973676c6f62616c2e636f6d2f5453532f487474705473705365727665723013060a2a864886f72f0101090204053003020101300e0603551d0f0101ff0404030206c030290603551d250422302006082b0601050507030206082b06010505070304060a2b060104018237140202301f0603551d23041830168014f3341211f18cc6f6b2a7b4994b708aca60a1cb45303a0603551d1f04333031302fa02da02b8629687474703a2f2f63726c2e71756f7661646973676c6f62616c2e636f6d2f717669636167342e63726c301d0603551d0e0416041448f8aa240ab6bd8035853a7d9cba65351cdcbda8300d06092a864886f70d01010b050003820201004957de02e16e94a09523d07847021cdf8fdd2619088cbecfafa002e12cb914570b86208c8711cadd585ec8de353f890bf67e6d0480a41fcf3d0b9864417d613fa44df9e3ba9320ccd795b02159be6a5ab3eebf738f26ad2491b8894fadcbbf33a555ffc246c3a058dbef079a5622cabd878e7f0c21a7e0c03fb2dbcbbe842b5b568d26804c44b90ba72e16902579ae4d58e82550f4994534adf947527c2788beeae5e86871148ae7edf92b05b514efcfc7c0373f50c05ec46c92b75a54c6e9dac8518bcad2cdf772cdd5505e126dc999d0f796c36af49758ec8d3fe82f2f903d14e640cbe38ea66d1b952436267973b1cb050e586f20aca72bc8e90d4c188f3fd1f07facf4d82767bd8ea5fa7703442176728ee3a8242eaca3248da264c8e0b9d190d2ea0daf77d55692b8339ffdad6d03346522080cf4b042ee9689df10370a6609397751102d17e4badf6ef9f394882c3981bd01c9bc468a03481a84e70df8e5ed71bbf1f1292a828dce672ee5ef797485a7de52d754cb202db7c35bbef026b1f11dad86a76487688d1c0a8b6f573be3a96d8a3f194b7cb0b5be3e73551e65d6f7f09823ca997e08763aff610474c5c38e1d014a6dbaab0e4dfbd142380770bf497b8a15f830cb8cf5aa705e9a30276305a12da2e079d34795f4ad5d17f6b5c047123c00075ac64ccecc932ea09a89123371e067dfed59c6ec1451717bbe62";
  const crlHex = "308205823082046a020101300d06092a864886f70d0101050500307f310b300906035504061302424d31193017060355040a131051756f5661646973204c696d6974656431253023060355040b131c526f6f742043657274696669636174696f6e20417574686f72697479312e302c0603550403132551756f566164697320526f6f742043657274696669636174696f6e20417574686f72697479170d3135303331333133303733375a170d3136303331323133313233375a308202f230330214782533159c9bdac24414b6d0c478e0c0e06c6fbf170d3131303430373230343332345a300c300a0603551d1504030a010430230204421fcec4170d3130303130373135303732345a300c300a0603551d1504030a010530230204421fd06d170d3130303130373230313734355a300c300a0603551d1504030a010530230204421f94fb170d3133313033303138303434335a300c300a0603551d1504030a010530230204421fcdd7170d3133313033303138303532395a300c300a0603551d1504030a010530230204421fce3d170d3036303230383030343633345a300c300a0603551d1504030a010430230204421fce3e170d3036303231353230323630345a300c300a0603551d1504030a010430230204421fd059170d3037303232323231343834355a300c300a0603551d1504030a010430230204421fd05a170d3037303232333135313230365a300c300a0603551d1504030a010430230204421fced3170d3037303332373133353031375a300c300a0603551d1504030a010430230204421fd21b170d3037303832383132353532345a300c300a0603551d1504030a010430230204421fd2a7170d3038303430313136353833325a300c300a0603551d1504030a0104302502147299560c73ff4dbfcb76bf3be93645255d163233170d3131303232343030323130315a30230204421fceab170d3130303130373230343131395a300c300a0603551d1504030a010530230204421fd2a8170d3132313233313135343433365a300c300a0603551d1504030a010530230204421fd29d170d3132313233313135343531365a300c300a0603551d1504030a010530230204421fcec2170d3130303130373230313830375a300c300a0603551d1504030a010530340215009db2c293ca0196269432fa798644cdb85fba04ff170d3131303232343030323034365a300c300a0603551d1504030a01053033021418fd7767af4c46171d1ff403899771921561b316170d3132303232303230333333375a300c300a0603551d1504030a0104a081c03081bd300a0603551d1404030201563081ae0603551d230481a63081a380148b4b6dedd329b90619ec3939a9f097846acbefdfa18184a48181307f310b300906035504061302424d31193017060355040a131051756f5661646973204c696d6974656431253023060355040b131c526f6f742043657274696669636174696f6e20417574686f72697479312e302c0603550403132551756f566164697320526f6f742043657274696669636174696f6e20417574686f7269747982043ab6508b300d06092a864886f70d01010505000382010100a285668cfeb1e85630d1e969bc921b1ef198159d038b7b5e1188159f16212c88d6cde697eaec7a9a23ca239ac1bcfc48f232014be42b9593f943ff4924e42d3f9a282f5092f7077f2a13723a578f9ad175b130a2e2ab69f381fe2c6afaa5b441003627859a6abf7c4ba887f97f28ad5a3b350ddcfac4441c7196c36a0908d6ea90e254a1c7329432fc82e836b648c4f12ec457f5e559ff00594c07614fc659d947c93e68c8af2f59ea7c7315693ad0f34c63c5ee0bb174f3a4164dca99f7c010bd829af8bffa706fb77c60dc0eee05620316f569d7f5a390c5867ccd0e55c46ba3443bbf03ff1bccb83a1b1db98707613eaecc421eafb29008b8523a79904f89";
  const ocspHex = "3082072630820120a16f306d310b300906035504061302424d31193017060355040a131051756f5661646973204c696d6974656431173015060355040b130e4f43535020526573706f6e646572312a30280603550403132151756f5661646973204f43535020417574686f72697479205369676e6174757265180f32303135303831333134313835385a30773075304d300906052b0e03021a050004145b13c1bab087db7e756424bc62817ef984199d6d0414f3341211f18cc6f6b2a7b4994b708aca60a1cb4502147b98ebb868efe4eefc130a509f9882579bd781158000180f32303135303831333039303030365aa011180f32303135303831363038353930305aa1233021301f06092b06010505073001020412041029e9538ed7585860d4fae1ca8b4301b9300d06092a864886f70d01010b050003820101001c85b4ca5bb6aac8773a806c808e01f57e862aecab198ceb7839a8e4013c701bf8df4e34f72803d82886d8adc325f9b35686d235929d4b0d8373d94f6cbea3f98b2d5e05ef41576b4988c0f48ddb2ef19d3a634b04f6773def85b5946f2160abea9c7b248c19ced9d3bfcdcefd56327ee8ffd6c85f1f6a7e33c81999ff7cc6b4765d5dbc606f8ee1fc4ec81de8e1a32965187629a65c834595c61add113b251b7ce183d8d57b6e39ea2e48419dc3e5bdf1ff8ec646e2db35461399821bbca9de093b0070fe67c46ea5939a8d5c0d7d26182179cb9efa42713432a15022bd131475bd940ebd21a82ffb14516c93d1fc9520f7640b15a9f348871b77d3db326373a08204ea308204e6308204e2308202caa00302010202145af39cdb0072d3f6763c0d7cd5263da6bf382722300d06092a864886f70d01010b05003049310b300906035504061302424d31193017060355040a131051756f5661646973204c696d69746564311f301d0603550403131651756f56616469732049737375696e67204341204734301e170d3135303230333132303630365a170d3138303230333132303630365a306d310b300906035504061302424d31193017060355040a131051756f5661646973204c696d6974656431173015060355040b130e4f43535020526573706f6e646572312a30280603550403132151756f5661646973204f43535020417574686f72697479205369676e617475726530820122300d06092a864886f70d01010105000382010f003082010a0282010100bc339d3095d5bbda25ff0e6c92afe473b157d54e5a88b0e75fab5ca9cda346636cbe4531b9ad04c60cf80b7cc15fc76c59b8639a65649a771614a97e9cfc9e104bfdda0e018669eac8f6f3ddd581284556ac54a37b9f81c57c12f6e5171e81e1fc4fc6aaf0e294df9ffb6d67f50330e1e5a75f582f5f34a051f533b4604f416ea63cf6ede2805eea133b1f4e6a04fadbc07390af8bab78365cbe890241a052a1142bdf511e3559a00c0792063a959d9bcdedd2f1d737dbd11e114152a620155ac42f4e41dabd24c920f085a6265fddc44d72c10c032b95d89535418c7f12d1c2d15a142c2b6cc9b923a3ab7e3868291d0f845901b7743f814ecd2b78b079dddd0203010001a3819d30819a30090603551d1304023000300f06092b06010505073001050402050030170603551d200410300e300c060a2b06010401be5801822c300e0603551d0f0101ff04040302078030130603551d25040c300a06082b06010505070309301f0603551d23041830168014f3341211f18cc6f6b2a7b4994b708aca60a1cb45301d0603551d0e0416041403e2cfe2889cebfa2371d552fece4c7a7d42a798300d06092a864886f70d01010b0500038202010044bcea1308ea8dfdeb1ec577397bd541c42f0ce775ef8dc24dbaa2a8c6c7df7091be8c1bdd000662687721b2b62816c1688626ef4831922d6feae9ffc43174068c9c5734b6efa4e35e538c04320f4e21733b33bc8ac44929447e0f04c5e03f7ff723495b068c7dd2cf10920f84b5959b644849d7a2a775e339da6e54a5f3e75f8f068baa3110e621880c3f2f965c6d5167a98292b71f45447703752b3abe237d0bcc7b8f060ae83364574ab76fe1f0834a9d0f69c0fc25111bad9ade21093512e5df4efbb899f2da1d66e2b7e13248e0eb1a3e7a9be234dfcf2f02e32c32932f9cd073411dd113bdb58d57c9d91f268306b6e4f30ae85957ba46a587aba4e698f1dca225422a4e3aaa45187e5b0bdb19ef8308e8669ebdcc62834a35dba8e9ef815667efa230d9394d7178a2e1f13cd108625a712362a27ece96f002e10a86d5b3ca0758bf9877f2e55ddc81a6cd4fc8c2e20f8e5dd94fdb638e43f2f5dc1535c0c63bdbcd4a6ecc4d3b908f3f13380bca3b09a5bba58e73027b2f0a041b799cb7fc7b4954850edd8a78a132d7444ea5d3640bff273737e3c41b6cc14d314e8ca01341c80c7f7d21716a9a7e84600eed6e964f5b06146c540191748395fb7d327515a369b9cc806b913f98f8d6e7da82927b2d458fa5efc2e429eaa1c382b0d76cf133109fa5606a949337c46e1a7e89f77d2f03956766687b9c0f00257bdbf3";

  const certRaw1 = Convert.FromHex(certHex1);
  const certRaw2 = Convert.FromHex(certHex2);
  const certRaw3 = Convert.FromHex(certHex3);
  const crlRaw1 = Convert.FromHex(crlHex);
  const ocspRaw1 = Convert.FromHex(ocspHex);

  const rootCa = pkijs.Certificate.fromBER(certRaw1);
  const intermediateCa = pkijs.Certificate.fromBER(certRaw2);
  const leafCert = pkijs.Certificate.fromBER(certRaw3);
  const crl1 = pkijs.CertificateRevocationList.fromBER(crlRaw1);
  const ocsp1 = pkijs.BasicOCSPResponse.fromBER(ocspRaw1);

  const chainEngine = new pkijs.CertificateChainValidationEngine({
    certs: [rootCa, intermediateCa, leafCert],
    crls: [crl1],
    ocsps: [ocsp1],
    checkDate: new Date("2015-07-13"), // optional
    trustedCerts: [rootCa],
  });

  const chain = await chainEngine.verify();

  console.log(chain);
}

main().catch(e => console.error(e));